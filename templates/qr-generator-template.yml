AWSTemplateFormatVersion: '2010-09-09'
Description: A QR Code Generating Api

# Add CodeBuild
# Add Log Stream

Parameters:
  Region:
    Type: String
    Default: us-east-1
  TimeStamp:
    Type: String
  AccountId:
    Type: String
    Default: '{{resolve:secretsmanager:account-id:SecretString:account-id:1}}'
  BranchName:
    Description: github branch name
    Type: String
    Default: master
  GitHubOwner:
    Type: String
    Default: jmartin432
  Email:
    Type: String
    Default: info@justinlmartin.com
  LambdasBucketName:
    Type: String
    Default: '{{resolve:ssm:qr-generator-lambdas-bucket:1}}'
  QRCodeBucketName:
    Type: String
    Default: '{{resolve:ssm:qr-generator-qrcodes-bucket:1}}'

Resources:

#Buckets
  LambdasBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref LambdasBucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  QRCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref QRCodeBucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

#Roles
  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiAccount:
    Type: AWS::ApiGateway::Account
    DependsOn:
      - CloudWatchRole
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: qr-generator-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: qr-generator-lambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowLogging
                Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - '*'
              - Sid: AllowS3Access
                Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${QRCodeBucketName}/*
#              - Sid: AllowSnsPublish
#                Effect: Allow
#                Action:
#                  - 'sns:Publish'
#                Resource:
#                  - '*'
#              - Sid: AllowCacheInvalidation
#                Effect: Allow
#                Action:
#                  - 'cloudfront:CreateInvalidation'
#                Resource:
#                  - '*'
      Path: "/"

#LogGroups
  QRGeneratorApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: qr-generator-api-log-group
      RetentionInDays: 14

#Lambdas
  QRGeneratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub ${TimeStamp}/qr-generator-lambda.zip
      FunctionName: qr-generator-lambda
      Handler: qr-generator-lambda.handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 5
      Description: Generates QR Code
    DependsOn:
      - LambdaRole

  QRGeneratorApi:
    Type: AWS::ApiGateway::RestApi
    DependsOn:
      - CloudWatchRole
      - ApiAccount
    Properties:
#      ApiKeySourceType: String
#      BinaryMediaTypes:
#        - String
#      Body: Json
#      BodyS3Location:
#        S3Location
#      CloneFrom: String
#      Description: String
#      DisableExecuteApiEndpoint: Boolean
#      EndpointConfiguration:
#        EndpointConfiguration
#      FailOnWarnings: Boolean
#      MinimumCompressionSize: Integer
#      Mode: String
      Name: qr-generator-api
#      Parameters:
#        Key: Value
#      Policy: Json
#      Tags:
#        - Tag

  CreateResource:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - QRGeneratorApi
    Properties:
      ParentId: !GetAtt
        - QRGeneratorApi
        - RootResourceId
      PathPart: create
      RestApiId: !Ref QRGeneratorApi

  CreatePostMethod:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - QRGeneratorApi
      - CreateResource
    Properties:
      ApiKeyRequired: False
#      AuthorizationScopes:
#        - String
      AuthorizationType: NONE
#      AuthorizerId: String
      HttpMethod: POST
#      RequestModels:
#      RequestParameters:
#        method:request:header:test-header: TRUE
      Integration:
        TimeoutInMillis: 10000
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt QRGeneratorLambda.Arn
#        CacheKeyParameters:
#          - String
#        CacheNamespace: String
#        ConnectionId: String
#        ConnectionType: String
#        ContentHandling: String
#        Credentials: String
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.body : integration.response.body
            #              Key: Value
            #          SelectionPattern: "200.*"

#          - ContentHandling: String
#            ResponseTemplates:
#              Key: Value
#            SelectionPattern: String
#        PassthroughBehavior: String
#        RequestTemplates:
#          Key : Value
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.body : TRUE
#      RequestModels:
#        Key: Value
      ResourceId: !Ref CreateResource
      RestApiId: !Ref QRGeneratorApi

  QRGeneratorApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - QRGeneratorApi
    Properties:
#      CustomerId: String
#      Description: String
      Enabled: True
#      GenerateDistinctId: Boolean
      Name: qr-generator-dev-key
#      StageKeys:
#        - RestApiId: !Ref QRGeneratorApi
#          StageName: dev

  #      Tags:
#        - Tag
#      Value: String

  QRGeneratorUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref QRGeneratorApi
          Stage: dev
#            Throttle:
#              Key: Value
#      Description: String
#      Quota:
#        QuotaSettings
#      Tags:
#        - Tag
#      Throttle:
#        ThrottleSettings
      UsagePlanName: qr-generator-dev-usage-plan

  DevUsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref QRGeneratorApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref QRGeneratorUsagePlan

  apiGatewayDevDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CreatePostMethod
      - QRGeneratorApiLogGroup
    Properties:
      RestApiId: !Ref QRGeneratorApi
      StageName: dev
      StageDescription:
        AccessLogSetting:
          DestinationArn: !GetAtt QRGeneratorApiLogGroup.Arn
          Format: "$context.extendedRequestId : '$context.integrationErrorMessage'"
        LoggingLevel: INFO

  LambdaApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt QRGeneratorLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGatewayId}/*/POST/create
        - apiGatewayId: !Ref QRGeneratorApi




Outputs:
  LatestTimeStamp:
    Value: !Ref TimeStamp
  ApiKeyId:
    Value: !Ref QRGeneratorApiKey
  ApiId:
    Value: !Ref QRGeneratorApi
  CreateResourceId:
    Value: !Ref CreateResource




#    SlackRouterLambdaCodeBuildEventTriggerPermission:
    #    Type: AWS::Lambda::Permission
    #    Properties:
    #      Action: 'lambda:InvokeFunction'
    #      FunctionName: !Ref SlackRouterLambda
    #      Principal: 'events.amazonaws.com'
    #      SourceArn: !GetAtt CodeBuildStateChangeRule.Arn
    #    DependsOn:
    #      - SlackRouterLambda

    #  SlackRouterLambdaSnsTriggerPermission:
    #    Type: AWS::Lambda::Permission
    #    Properties:
    #      Action: 'lambda:InvokeFunction'
    #      FunctionName: !Ref SlackRouterLambda
    #      Principal: 'sns.amazonaws.com'
    #      SourceArn: !Ref PipelineStatusTopic
    #    DependsOn:
    #      - SlackRouterLambda


    #  EventsRuleRole:
    #    Type: AWS::IAM::Role
    #    Properties:
    #      RoleName: static-sites-pipeline-events-rule-role
    #      AssumeRolePolicyDocument:
    #        Version: '2012-10-17'
    #        Statement:
    #          - Effect: Allow
    #            Principal:
    #              Service:
    #                - events.amazonaws.com
    #            Action:
    #              - sts:AssumeRole
    #      Policies:
    #        - PolicyName: static-sites-pipeline-events-rule-policy
    #          PolicyDocument:
    #            Version: '2012-10-17'
    #            Statement:
    #              - Sid: AllowLambdaInvoke
    #                Effect: Allow
    #                Action:
    #                  - 'lambda:InvokeFunction'
    #                Resource:
    #                  - '*'
    #      Path: "/"